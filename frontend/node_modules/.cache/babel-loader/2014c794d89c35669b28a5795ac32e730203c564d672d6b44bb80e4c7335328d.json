{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amitr\\\\OneDrive\\\\Desktop\\\\YoungLabs\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react'; // Importing React and useState for state management\nimport './index.css'; // Importing external CSS for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State variables to store user input, greeting message, and error message\n  const [name, setName] = useState('');\n  const [greeting, setGreeting] = useState('');\n  const [error, setError] = useState('');\n\n  // Function to fetch the greeting from the backend\n  const handleGetGreeting = async () => {\n    setError(''); // Reset error message\n    setGreeting(''); // Reset greeting message\n\n    if (!name.trim()) {\n      // Check if the input is empty\n      setError('Please enter your name.');\n      return;\n    }\n    try {\n      // Fetching the greeting from the backend API\n      const response = await fetch(`http://localhost:8000/api/greet?name=${encodeURIComponent(name)}`);\n      const data = await response.json();\n      if (response.ok) {\n        setGreeting(data.message); // Update greeting message if successful\n      } else {\n        setError(data.error || 'Something went wrong.'); // Handle API errors\n      }\n    } catch (err) {\n      // Handle network errors\n      setError('Failed to fetch greeting. Make sure the server is running on port 8000.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Get your greeting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your name\",\n        value: name,\n        onChange: e => setName(e.target.value) // Update name state on input change\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGetGreeting,\n        children: \"Get Greeting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), greeting && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"greeting-message\",\n        children: greeting\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 22\n      }, this), ' ', error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 19\n      }, this), ' ']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"JHkqJHQIezWCsa4nHBsUUCgCneE=\");\n_c = App;\nexport default App; // Exporting the App component\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","name","setName","greeting","setGreeting","error","setError","handleGetGreeting","trim","response","fetch","encodeURIComponent","data","json","ok","message","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/amitr/OneDrive/Desktop/YoungLabs/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react'; // Importing React and useState for state management\nimport './index.css'; // Importing external CSS for styling\n\nfunction App() {\n  // State variables to store user input, greeting message, and error message\n  const [name, setName] = useState('');\n  const [greeting, setGreeting] = useState('');\n  const [error, setError] = useState('');\n\n  // Function to fetch the greeting from the backend\n  const handleGetGreeting = async () => {\n    setError(''); // Reset error message\n    setGreeting(''); // Reset greeting message\n\n    if (!name.trim()) {\n      // Check if the input is empty\n      setError('Please enter your name.');\n      return;\n    }\n\n    try {\n      // Fetching the greeting from the backend API\n      const response = await fetch(\n        `http://localhost:8000/api/greet?name=${encodeURIComponent(name)}`\n      );\n      const data = await response.json();\n\n      if (response.ok) {\n        setGreeting(data.message); // Update greeting message if successful\n      } else {\n        setError(data.error || 'Something went wrong.'); // Handle API errors\n      }\n    } catch (err) {\n      // Handle network errors\n      setError(\n        'Failed to fetch greeting. Make sure the server is running on port 8000.'\n      );\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"card\">\n        <h1>Get your greeting</h1>\n        <input\n          type=\"text\"\n          placeholder=\"Enter your name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)} // Update name state on input change\n        />\n        <button onClick={handleGetGreeting}>Get Greeting</button>\n        {greeting && <p className=\"greeting-message\">{greeting}</p>}{' '}\n        {/* Display greeting if available */}\n        {error && <p className=\"error-message\">{error}</p>}{' '}\n        {/* Display error if any */}\n      </div>\n    </div>\n  );\n}\n\nexport default App; // Exporting the App component\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO,CAAC,CAAC;AACzC,OAAO,aAAa,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAMW,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpCD,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IACdF,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEjB,IAAI,CAACH,IAAI,CAACO,IAAI,CAAC,CAAC,EAAE;MAChB;MACAF,QAAQ,CAAC,yBAAyB,CAAC;MACnC;IACF;IAEA,IAAI;MACF;MACA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAC1B,wCAAwCC,kBAAkB,CAACV,IAAI,CAAC,EAClE,CAAC;MACD,MAAMW,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAElC,IAAIJ,QAAQ,CAACK,EAAE,EAAE;QACfV,WAAW,CAACQ,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC;MAC7B,CAAC,MAAM;QACLT,QAAQ,CAACM,IAAI,CAACP,KAAK,IAAI,uBAAuB,CAAC,CAAC,CAAC;MACnD;IACF,CAAC,CAAC,OAAOW,GAAG,EAAE;MACZ;MACAV,QAAQ,CACN,yEACF,CAAC;IACH;EACF,CAAC;EAED,oBACER,OAAA;IAAKmB,SAAS,EAAC,WAAW;IAAAC,QAAA,eACxBpB,OAAA;MAAKmB,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACnBpB,OAAA;QAAAoB,QAAA,EAAI;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1BxB,OAAA;QACEyB,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,iBAAiB;QAC7BC,KAAK,EAAExB,IAAK;QACZyB,QAAQ,EAAGC,CAAC,IAAKzB,OAAO,CAACyB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAAC;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3C,CAAC,eACFxB,OAAA;QAAQ+B,OAAO,EAAEtB,iBAAkB;QAAAW,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACxDnB,QAAQ,iBAAIL,OAAA;QAAGmB,SAAS,EAAC,kBAAkB;QAAAC,QAAA,EAAEf;MAAQ;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAAE,GAAG,EAE/DjB,KAAK,iBAAIP,OAAA;QAAGmB,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAEb;MAAK;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAAE,GAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEpD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACtB,EAAA,CAvDQD,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AAyDZ,eAAeA,GAAG,CAAC,CAAC;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}